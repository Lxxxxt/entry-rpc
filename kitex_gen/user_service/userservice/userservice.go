// Code generated by Kitex v0.8.0. DO NOT EDIT.

package userservice

import (
	"context"
	user_service "entry-rpc/kitex_gen/user_service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user_service.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUser":    kitex.NewMethodInfo(getUserHandler, newUserServiceGetUserArgs, newUserServiceGetUserResult, false),
		"SaveUser":   kitex.NewMethodInfo(saveUserHandler, newUserServiceSaveUserArgs, newUserServiceSaveUserResult, false),
		"DeleteUser": kitex.NewMethodInfo(deleteUserHandler, newUserServiceDeleteUserArgs, newUserServiceDeleteUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user_service",
		"ServiceFilePath": `user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_service.UserServiceGetUserArgs)
	realResult := result.(*user_service.UserServiceGetUserResult)
	success, err := handler.(user_service.UserService).GetUser(ctx, realArg.UserID)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserArgs() interface{} {
	return user_service.NewUserServiceGetUserArgs()
}

func newUserServiceGetUserResult() interface{} {
	return user_service.NewUserServiceGetUserResult()
}

func saveUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_service.UserServiceSaveUserArgs)

	err := handler.(user_service.UserService).SaveUser(ctx, realArg.User)
	if err != nil {
		return err
	}

	return nil
}
func newUserServiceSaveUserArgs() interface{} {
	return user_service.NewUserServiceSaveUserArgs()
}

func newUserServiceSaveUserResult() interface{} {
	return user_service.NewUserServiceSaveUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_service.UserServiceDeleteUserArgs)

	err := handler.(user_service.UserService).DeleteUser(ctx, realArg.UserID)
	if err != nil {
		return err
	}

	return nil
}
func newUserServiceDeleteUserArgs() interface{} {
	return user_service.NewUserServiceDeleteUserArgs()
}

func newUserServiceDeleteUserResult() interface{} {
	return user_service.NewUserServiceDeleteUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUser(ctx context.Context, userID int64) (r *user_service.User, err error) {
	var _args user_service.UserServiceGetUserArgs
	_args.UserID = userID
	var _result user_service.UserServiceGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SaveUser(ctx context.Context, user *user_service.User) (err error) {
	var _args user_service.UserServiceSaveUserArgs
	_args.User = user
	var _result user_service.UserServiceSaveUserResult
	if err = p.c.Call(ctx, "SaveUser", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) DeleteUser(ctx context.Context, userID int64) (err error) {
	var _args user_service.UserServiceDeleteUserArgs
	_args.UserID = userID
	var _result user_service.UserServiceDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return nil
}
